spring:
  application:
    name: catch-waiting-gateway
  main:
    web-application-type: reactive
  lifecycle:
    timeout-per-shutdown-phase: 20s
  jackson:
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false

  security:
    user:
      name: "wad"
      password: "wAdc0rp#210"

  cloud:
    gateway:
      discovery.locator:
        enabled: false
        lowerCaseServiceId: true

      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_UNIQUE
        - GlobalLoggingFilter

      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "*"
            allowedHeaders: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - OPTIONS
              - DELETE

      httpclient:
        pool:
          max-idle-time: 20000 # ALB쪽의 기본 keep-alive 타임아웃이 30초로 잡혀있다. 그 전에 끊기도록 20초로 잡아준다.

      routes:
        ############################################################################
        # catch-pos 관련 라우팅
        ############################################################################

        # catch-pos oauth API 라우팅. /catchpos/** 로 시작하는 API 라우팅보다 먼저 정의되어야 한다.
        # 기본 라우팅과 동일한 방법으로 사용 가능하게 할지 고민중.. (front-end 에서 요청이 있을 때 확인 필요)
        - id: catch-pos-oauth-api-routing
          predicates:
            - Path=/catchpos/oauth/api/**
          uri: https://local-apigw-catchpos.catchtable.co.kr:30070
          filters:
            - CatchWaitingAuthFilter
            - RewritePath=/catchpos/oauth/api/(?<segments>.*), /oauth/api/${segments}

        # catch-pos API 인증 제외 라우팅.
        # 이 목록은 catch-pos-apps 프로젝트에서 가져온 것으로, catch-pos-apps/api-gateway의 application.yml에 정의된 내용과 동일해야 한다.
        # front-end 요청으로 /api/catchpos 규칙으로 적용
        - id: catch-pos-api-no-auth-routing
          predicates:
            - Path=/api/catchpos/app/info, /api/catchpos/register-user/**, /api/catchpos/terms, /api/catchpos/find-userpw/**, /api/catchpos/find-userid/**, /api/catchpos/login-user/**, /api/catchpos/dormant-user/**, /api/catchpos/sample/**, /api/catchpos/user/**, /api/catchpos/points/to-extinct/**
          uri: https://local-apigw-catchpos.catchtable.co.kr:30070
          filters:
            - RewritePath=/api/catchpos/app/info, /catchpos/api/app/info
            - RewritePath=/api/catchpos/register-user/(?<segment>/?.*), /catchpos/api/register-user/${segment}
            - RewritePath=/api/catchpos/terms, /catchpos/api/terms
            - RewritePath=/api/catchpos/find-userpw/(?<segment>/?.*), /catchpos/api/find-userpw/${segment}
            - RewritePath=/api/catchpos/find-userid/(?<segment>/?.*), /catchpos/api/find-userid/${segment}
            - RewritePath=/api/catchpos/login-user/(?<segment>/?.*), /catchpos/api/login-user/${segment}
            - RewritePath=/api/catchpos/dormant-user/(?<segment>/?.*), /catchpos/api/dormant-user/${segment}
            - RewritePath=/api/catchpos/sample/(?<segment>/?.*), /catchpos/api/sample/${segment}
            - RewritePath=/api/catchpos/user/(?<segment>/?.*), /catchpos/api/user/${segment}
            - RewritePath=/api/catchpos/points/to-extinct/(?<segment>/?.*), /catchpos/api/points/to-extinct/${segment}
            - RewritePath=/api/catchpos/(?<segment>/?.*), /catchpos/api/${segment}

        # catch-pos API 기본 라우팅
        # front-end 요청으로 /api/catchpos 규칙으로 적용
        - id: catch-pos-api-routing
          predicates:
            - Path=/api/catchpos/**
          uri: https://alpha-apigw.catchpos.co.kr
          filters:
            - CatchWaitingAuthFilter
            - RewritePath=/api/catchpos/(?<segment>/?.*), /catchpos/api/${segment}

        ############################################################################
        # waiting 라우팅
        ############################################################################
        # waiting API 인증 제외 라우팅
        - id: waiting-api-no-auth-routing
          predicates:
            - Path=/api/login, /api/login/**
          uri: http://localhost:8088

        # waiting API 인증 제외 라우팅
        - id: waiting-api-internal-only-routing
          predicates:
            - Path=/api/v1/channels/**
          uri: http://localhost:8088
          filters:
            - InternalAccessOnlyFilter

        # waiting API 기본 라우팅
        - id: waiting-api-routing
          predicates:
            - Path=/api/**
          uri: http://localhost:8088
          filters:
            - CatchWaitingAuthFilter

        # waiting WEB 기본 라우팅
        - id: waiting-web-routing
          predicates:
            - Path=/web/**
          uri: http://localhost:8088

        # TEST API 라우팅
        - id: waiting-test-routing
          predicates:
            - Path=/test/**
          uri: http://localhost:8088
          filters:
          # TODO: 내부/개발 환경에서만 접근 가능하도록 필터 추가 필요

        # waiting API Docs 라우팅
        - id: waiting-api-doc-routing
          predicates:
            - Path=/docs/**
          uri: http://localhost:8088

        # waiting internal 라우팅
        - id: waiting-internal-routing
          predicates:
            - Path=/internal/**
          uri: http://localhost:8088
          filters:
            - CatchWaitingAuthFilter

        - id: non-match-routing
          order: 9999
          predicates:
            - Path=/**
          # 형식상 필요함.
          uri: http://localhost:8088
          filters:
            - StaticResponseHeader=404

server:
  port: 8087
  shutdown: graceful
  ssl:
    enabled: false

management:
  endpoint:
    shutdown:
      enabled: false
  endpoints:
    web:
      exposure:
        include: '*'

logging:
  level:
    # api-gw 에서 어느 backend 에 요청을 보내는지 모니터링 하기 위해 로그를 DEBUG로 남긴다.
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: DEBUG
    reactor.netty.http.client.HttpClientConnect: DEBUG
    root: INFO

gateway-props:
  catchTablePosApiHost: https://local-apigw-catchpos.catchtable.co.kr:30070
  isEnableLoggingRequestDetails: true
  internalCidrs:
    # 정자 사무실
    - 59.13.125.170/32 # 킨스타워 16층 IP
    - 59.13.125.177/32 # 킨스타워 16층 무선 IP
    - 59.13.125.165/32 # 킨스타워 3층 IP (구)
    - 125.132.204.231/32 # 킨스타워 3층 IP (신)
    # CATCH-POS DEV VPC
    - 10.5.0.0/16
    # CATCH-WAITING DEV VPC
    - 10.8.0.0/16
    # CATCH-POS PROD VPC
    - 172.21.0.0/16
    # CATCH-WAITING PROD VPC
    - 172.23.0.0/16
    # 서현 사무실
    - 210.91.70.137/32 # 구 서현 사무실 IP
    - 211.248.160.84/32 # 현 서현 사무실 IP
    # 정자2 (정석)
    - 125.132.149.188/32
    # 3층 네트워크 임시
    - 125.132.204.231/32
    # WAD DEV VPC
    - 10.0.0.0/21
    # WAD PROD VPC
    - 172.17.0.0/20

    - 133.186.132.105/32
    - 133.186.210.24/32
    - 45.249.163.114/32
    - 172.19.0.0/16
    - 13.124.70.68/32
    - 15.164.205.76/32
    - 13.209.241.233/32
    - 10.1.0.0/16
    - 3.39.112.218/32
    - 3.34.161.221/32
    - 3.39.206.143/32
    - 3.36.234.140/32
    - 13.209.144.8/32
    - 13.124.34.157/32
    - 54.180.187.6/32
    - 15.165.20.138/32
    - 13.209.252.1/32
    - 52.78.201.71/32
    - 3.37.227.230/32
    - 15.164.19.150/32
    - 3.37.42.105/32
    - 13.124.15.59/32
    - 43.200.72.155/32
    - 10.255.0.0/24
    # 판교 유스페이스/VPN IP
    - 61.84.12.7/32
    # 판교 유스페이스/VPN IP
    - 61.84.12.5/32
    - 59.13.7.234/32

---
spring:
  config:
    activate:
      on-profile: alpha

  cloud:
    gateway:
      routes:
        ############################################################################
        # catch-pos 관련 라우팅
        ############################################################################

        # catch-pos oauth API 라우팅. /catchpos/** 로 시작하는 API 라우팅보다 먼저 정의되어야 한다.
        # 기본 라우팅과 동일한 방법으로 사용 가능하게 할지 고민중.. (front-end 에서 요청이 있을 때 확인 필요)
        - id: catch-pos-oauth-api-routing
          predicates:
            - Path=/catchpos/oauth/api/**
          uri: https://alpha-apigw.catchpos.co.kr
          filters:
            - CatchWaitingAuthFilter
            - RewritePath=/catchpos/oauth/api/(?<segments>.*), /oauth/api/${segments}

        # catch-pos API 인증 제외 라우팅.
        # 이 목록은 catch-pos-apps 프로젝트에서 가져온 것으로, catch-pos-apps/api-gateway의 application.yml에 정의된 내용과 동일해야 한다.
        # front-end 요청으로 /api/catchpos 규칙으로 적용
        - id: catch-pos-api-no-auth-routing
          predicates:
            - Path=/api/catchpos/app/info, /api/catchpos/register-user/**, /api/catchpos/terms, /api/catchpos/find-userpw/**, /api/catchpos/find-userid/**, /api/catchpos/login-user/**, /api/catchpos/dormant-user/**, /api/catchpos/sample/**, /api/catchpos/user/**, /api/catchpos/points/to-extinct/**
          uri: https://alpha-apigw.catchpos.co.kr
          filters:
            - RewritePath=/api/catchpos/app/info, /catchpos/api/app/info
            - RewritePath=/api/catchpos/register-user/(?<segment>/?.*), /catchpos/api/register-user/${segment}
            - RewritePath=/api/catchpos/terms, /catchpos/api/terms
            - RewritePath=/api/catchpos/find-userpw/(?<segment>/?.*), /catchpos/api/find-userpw/${segment}
            - RewritePath=/api/catchpos/find-userid/(?<segment>/?.*), /catchpos/api/find-userid/${segment}
            - RewritePath=/api/catchpos/login-user/(?<segment>/?.*), /catchpos/api/login-user/${segment}
            - RewritePath=/api/catchpos/dormant-user/(?<segment>/?.*), /catchpos/api/dormant-user/${segment}
            - RewritePath=/api/catchpos/sample/(?<segment>/?.*), /catchpos/api/sample/${segment}
            - RewritePath=/api/catchpos/user/(?<segment>/?.*), /catchpos/api/user/${segment}
            - RewritePath=/api/catchpos/points/to-extinct/(?<segment>/?.*), /catchpos/api/points/to-extinct/${segment}
            - RewritePath=/api/catchpos/(?<segment>/?.*), /catchpos/api/${segment}

        # catch-pos API 기본 라우팅
        # front-end 요청으로 /api/catchpos 규칙으로 적용
        - id: catch-pos-api-routing
          predicates:
            - Path=/api/catchpos/**
          uri: https://alpha-apigw.catchpos.co.kr
          filters:
            - CatchWaitingAuthFilter
            - RewritePath=/api/catchpos/(?<segment>/?.*), /catchpos/api/${segment}


        ############################################################################
        # waiting 라우팅
        ############################################################################
        # waiting API 인증 제외 라우팅
        - id: waiting-api-no-auth-routing
          predicates:
            - Path=/api/login, /api/login/**
          uri: https://alpha-api.dev.catchtablewaiting.com

        # waiting API 인증 제외 라우팅
        - id: waiting-api-internal-only-routing
          predicates:
            - Path=/api/v1/channels/**
          uri: https://alpha-api.dev.catchtablewaiting.com
          filters:
            - InternalAccessOnlyFilter

        # waiting API 기본 라우팅
        - id: waiting-api-routing
          predicates:
            - Path=/api/**
          uri: https://alpha-api.dev.catchtablewaiting.com
          filters:
            - CatchWaitingAuthFilter

        # waiting WEB 기본 라우팅
        - id: waiting-web-routing
          predicates:
            - Path=/web/**
          uri: https://alpha-api.dev.catchtablewaiting.com

        # TEST API 라우팅
        - id: waiting-test-routing
          predicates:
            - Path=/test/**
          uri: https://alpha-api.dev.catchtablewaiting.com
          filters:
          # TODO: 내부/개발 환경에서만 접근 가능하도록 필터 추가 필요

        # waiting API Docs 라우팅
        - id: waiting-api-doc-routing
          predicates:
            - Path=/docs/**
          uri: https://alpha-api.dev.catchtablewaiting.com

        # waiting internal 라우팅
        - id: waiting-internal-routing
          predicates:
            - Path=/internal/**
          uri: https://alpha-api.dev.catchtablewaiting.com
          filters:
            - CatchWaitingAuthFilter

        - id: non-match-routing
          order: 9999
          predicates:
            - Path=/**
          # 형식상 필요함.
          uri: http://localhost:8088
          filters:
            - StaticResponseHeader=404


sentry:
  #  아직 알파 sentry 없음
  dsn: https://445c0a6d4732405c8bcec7b812299b9c@sentry.infra.wadcorp.co.kr/45
  # Set traces-sample-rate to 1.0 to capture 100% of transactions for performance monitoring.
  # We recommend adjusting this value in production.
  traces-sample-rate: 0.0


gateway-props:
  catchTablePosApiHost: https://alpha-apigw.catchpos.co.kr
  isEnableLoggingRequestDetails: false


---
spring:
  config:
    activate:
      on-profile: real

  cloud:
    gateway:
      routes:
        ############################################################################
        # catch-pos 관련 라우팅
        ############################################################################

        # catch-pos oauth API 라우팅. /catchpos/** 로 시작하는 API 라우팅보다 먼저 정의되어야 한다.
        - id: catch-pos-oauth-api-routing
          predicates:
            - Path=/catchpos/oauth/api/**
          uri: https://apigw.catchpos.co.kr
          filters:
            - CatchWaitingAuthFilter
            - RewritePath=/catchpos/oauth/api/(?<segments>.*), /oauth/api/${segments}

        # catch-pos API 인증 제외 라우팅.
        # 이 목록은 catch-pos-apps 프로젝트에서 가져온 것으로, catch-pos-apps/api-gateway의 application.yml에 정의된 내용과 동일해야 한다.
        - id: catch-pos-api-no-auth-routing
          predicates:
            - Path=/api/catchpos/app/info, /api/catchpos/register-user/**, /api/catchpos/terms, /api/catchpos/find-userpw/**, /api/catchpos/find-userid/**, /api/catchpos/login-user/**, /api/catchpos/dormant-user/**, /api/catchpos/sample/**, /api/catchpos/user/**, /api/catchpos/points/to-extinct/**
          uri: https://apigw.catchpos.co.kr
          filters:
            - RewritePath=/api/catchpos/app/info, /catchpos/api/app/info
            - RewritePath=/api/catchpos/register-user/(?<segment>/?.*), /catchpos/api/register-user/${segment}
            - RewritePath=/api/catchpos/terms, /catchpos/api/terms
            - RewritePath=/api/catchpos/find-userpw/(?<segment>/?.*), /catchpos/api/find-userpw/${segment}
            - RewritePath=/api/catchpos/find-userid/(?<segment>/?.*), /catchpos/api/find-userid/${segment}
            - RewritePath=/api/catchpos/login-user/(?<segment>/?.*), /catchpos/api/login-user/${segment}
            - RewritePath=/api/catchpos/dormant-user/(?<segment>/?.*), /catchpos/api/dormant-user/${segment}
            - RewritePath=/api/catchpos/sample/(?<segment>/?.*), /catchpos/api/sample/${segment}
            - RewritePath=/api/catchpos/user/(?<segment>/?.*), /catchpos/api/user/${segment}
            - RewritePath=/api/catchpos/points/to-extinct/(?<segment>/?.*), /catchpos/api/points/to-extinct/${segment}
            - RewritePath=/api/catchpos/(?<segment>/?.*), /catchpos/api/${segment}

        # catch-pos API 기본 라우팅
        - id: catch-pos-api-routing
          predicates:
            - Path=/api/catchpos/**
          uri: https://apigw.catchpos.co.kr
          filters:
            - CatchWaitingAuthFilter
            - RewritePath=/api/catchpos/(?<segment>/?.*), /catchpos/api/${segment}


        ############################################################################
        # waiting 라우팅
        ############################################################################
        # waiting API 인증 제외 라우팅
        - id: waiting-api-no-auth-routing
          predicates:
            - Path=/api/login, /api/login/**
          uri: https://api.catchtablewaiting.com

        # waiting API 인증 제외 라우팅
        - id: waiting-api-internal-only-routing
          predicates:
            - Path=/api/v1/channels/**
          uri: https://api.catchtablewaiting.com
          filters:
            - InternalAccessOnlyFilter

        # waiting API 기본 라우팅
        - id: waiting-api-routing
          predicates:
            - Path=/api/**
          uri: https://api.catchtablewaiting.com
          filters:
            - CatchWaitingAuthFilter

        # waiting WEB 기본 라우팅
        - id: waiting-web-routing
          predicates:
            - Path=/web/**
          uri: https://api.catchtablewaiting.com

        # TEST API 라우팅
        - id: waiting-test-routing
          predicates:
            - Path=/test/**
          uri: https://api.catchtablewaiting.com
          filters:
          # TODO: 내부/개발 환경에서만 접근 가능하도록 필터 추가 필요

        # waiting internal 라우팅
        - id: waiting-internal-routing
          predicates:
            - Path=/internal/**
          uri: https://api.catchtablewaiting.com
          filters:
            - CatchWaitingAuthFilter

        - id: non-match-routing
          order: 9999
          predicates:
            - Path=/**
          # 형식상 필요함.
          uri: http://localhost:8088
          filters:
            - StaticResponseHeader=404

logging:
  level:
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: INFO
    reactor.netty.http.client.HttpClientConnect: INFO
    root: INFO

sentry:
  dsn: https://df7d2777e1be4f22b31ec4d10cb125fc@sentry.infra.wadcorp.co.kr/51
  environment: catch-waiting-gateway
  logging:
    minimum-event-level: WARN
  traces-sample-rate: 0.0

gateway-props:
  catchTablePosApiHost: https://apigw.catchpos.co.kr
  isEnableLoggingRequestDetails: false
